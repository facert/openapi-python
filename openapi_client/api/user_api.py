# coding: utf-8

"""
    DeBank OpenAPI

    Build for DeFi Developers.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_user_complex_protocol_list(self, id, **kwargs):  # noqa: E501
        """get_user_complex_protocol_list  # noqa: E501

        Get list of protocols with user portfolio details on all supported chains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_complex_protocol_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_complex_protocol_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_complex_protocol_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_complex_protocol_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_user_complex_protocol_list  # noqa: E501

        Get list of protocols with user portfolio details on all supported chains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_complex_protocol_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_complex_protocol_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_complex_protocol_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/all_complex_protocol_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_complex_protocol_list_0(self, id, **kwargs):  # noqa: E501
        """get_user_complex_protocol_list_0  # noqa: E501

        Get list of protocols with user portfolio details on a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_complex_protocol_list_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_complex_protocol_list_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_complex_protocol_list_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_complex_protocol_list_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_user_complex_protocol_list_0  # noqa: E501

        Get list of protocols with user portfolio details on a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_complex_protocol_list_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'chain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_complex_protocol_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_complex_protocol_list_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/complex_protocol_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_nft_all_list(self, id, **kwargs):  # noqa: E501
        """get_user_nft_all_list  # noqa: E501

        Get user nft list on all supported chains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nft_all_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param bool is_all: If true, all tokens are returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_nft_all_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_nft_all_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_nft_all_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_user_nft_all_list  # noqa: E501

        Get user nft list on all supported chains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nft_all_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param bool is_all: If true, all tokens are returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'is_all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_nft_all_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_nft_all_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'is_all' in params:
            query_params.append(('is_all', params['is_all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/all_nft_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_nft_list(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_nft_list  # noqa: E501

        Get user nft list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nft_list(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param str chain_id: ChainID (required)
        :param bool is_all: If true, all tokens are returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_nft_list_with_http_info(id, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_nft_list_with_http_info(id, chain_id, **kwargs)  # noqa: E501
            return data

    def get_user_nft_list_with_http_info(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_nft_list  # noqa: E501

        Get user nft list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_nft_list_with_http_info(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param str chain_id: ChainID (required)
        :param bool is_all: If true, all tokens are returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'chain_id', 'is_all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_nft_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_nft_list`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_user_nft_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501
        if 'is_all' in params:
            query_params.append(('is_all', params['is_all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/nft_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_protocol(self, id, protocol_id, **kwargs):  # noqa: E501
        """get_user_protocol  # noqa: E501

        Get the user's portfolio in the protocol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_protocol(id, protocol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str protocol_id: protocol id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_protocol_with_http_info(id, protocol_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_protocol_with_http_info(id, protocol_id, **kwargs)  # noqa: E501
            return data

    def get_user_protocol_with_http_info(self, id, protocol_id, **kwargs):  # noqa: E501
        """get_user_protocol  # noqa: E501

        Get the user's portfolio in the protocol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_protocol_with_http_info(id, protocol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str protocol_id: protocol id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'protocol_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_protocol`")  # noqa: E501
        # verify the required parameter 'protocol_id' is set
        if ('protocol_id' not in params or
                params['protocol_id'] is None):
            raise ValueError("Missing the required parameter `protocol_id` when calling `get_user_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'protocol_id' in params:
            query_params.append(('protocol_id', params['protocol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_simple_protocol_list(self, id, **kwargs):  # noqa: E501
        """get_user_simple_protocol_list  # noqa: E501

        Stats the user's protocol assets on all supported chains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_simple_protocol_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_simple_protocol_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_simple_protocol_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_simple_protocol_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_user_simple_protocol_list  # noqa: E501

        Stats the user's protocol assets on all supported chains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_simple_protocol_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_simple_protocol_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_simple_protocol_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/all_simple_protocol_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_simple_protocol_list_0(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_simple_protocol_list_0  # noqa: E501

        Stats the user's protocol assets on a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_simple_protocol_list_0(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_simple_protocol_list_0_with_http_info(id, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_simple_protocol_list_0_with_http_info(id, chain_id, **kwargs)  # noqa: E501
            return data

    def get_user_simple_protocol_list_0_with_http_info(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_simple_protocol_list_0  # noqa: E501

        Stats the user's protocol assets on a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_simple_protocol_list_0_with_http_info(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'chain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_simple_protocol_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_simple_protocol_list_0`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_user_simple_protocol_list_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/simple_protocol_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_token(self, id, chain_id, token_id, **kwargs):  # noqa: E501
        """get_user_token  # noqa: E501

        Get user token balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token(id, chain_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param str chain_id: ChainID (required)
        :param str token_id: token id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_token_with_http_info(id, chain_id, token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_token_with_http_info(id, chain_id, token_id, **kwargs)  # noqa: E501
            return data

    def get_user_token_with_http_info(self, id, chain_id, token_id, **kwargs):  # noqa: E501
        """get_user_token  # noqa: E501

        Get user token balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_with_http_info(id, chain_id, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param str chain_id: ChainID (required)
        :param str token_id: token id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'chain_id', 'token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_token`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_user_token`")  # noqa: E501
        # verify the required parameter 'token_id' is set
        if ('token_id' not in params or
                params['token_id'] is None):
            raise ValueError("Missing the required parameter `token_id` when calling `get_user_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('token_id', params['token_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_token_all_list(self, id, **kwargs):  # noqa: E501
        """get_user_token_all_list  # noqa: E501

        Get user token balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_all_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param bool is_all: If true, all tokens are returned, including protocol-derived tokens
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_token_all_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_token_all_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_token_all_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_user_token_all_list  # noqa: E501

        Get user token balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_all_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param bool is_all: If true, all tokens are returned, including protocol-derived tokens
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'is_all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_token_all_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_token_all_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'is_all' in params:
            query_params.append(('is_all', params['is_all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/all_token_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_token_authorized_list(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_token_authorized_list  # noqa: E501

        Show the user's risk exposure of approved token on a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_authorized_list(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_token_authorized_list_with_http_info(id, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_token_authorized_list_with_http_info(id, chain_id, **kwargs)  # noqa: E501
            return data

    def get_user_token_authorized_list_with_http_info(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_token_authorized_list  # noqa: E501

        Show the user's risk exposure of approved token on a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_authorized_list_with_http_info(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'chain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_token_authorized_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_token_authorized_list`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_user_token_authorized_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/token_authorized_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_token_list(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_token_list  # noqa: E501

        Get user token balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_list(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param str chain_id: ChainID (required)
        :param bool is_all: If true, all tokens are returned, including protocol-derived tokens
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_token_list_with_http_info(id, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_token_list_with_http_info(id, chain_id, **kwargs)  # noqa: E501
            return data

    def get_user_token_list_with_http_info(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_token_list  # noqa: E501

        Get user token balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_list_with_http_info(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :param str chain_id: ChainID (required)
        :param bool is_all: If true, all tokens are returned, including protocol-derived tokens
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'chain_id', 'is_all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_token_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_token_list`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_user_token_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501
        if 'is_all' in params:
            query_params.append(('is_all', params['is_all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/token_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_token_list_0(self, id, **kwargs):  # noqa: E501
        """get_user_token_list_0  # noqa: E501

        Get user chain list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_list_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_token_list_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_token_list_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_token_list_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_user_token_list_0  # noqa: E501

        Get user chain list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_token_list_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_token_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_token_list_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/used_chain_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_total_balance(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_total_balance  # noqa: E501

        Get the net assets of a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_total_balance(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_total_balance_with_http_info(id, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_total_balance_with_http_info(id, chain_id, **kwargs)  # noqa: E501
            return data

    def get_user_total_balance_with_http_info(self, id, chain_id, **kwargs):  # noqa: E501
        """get_user_total_balance  # noqa: E501

        Get the net assets of a chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_total_balance_with_http_info(id, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :param str chain_id: ChainID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'chain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_total_balance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_total_balance`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_user_total_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/chain_balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_total_balance_0(self, id, **kwargs):  # noqa: E501
        """get_user_total_balance_0  # noqa: E501

        Get net assets on multiple chains, including tokens and protocols  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_total_balance_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_total_balance_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_total_balance_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_total_balance_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_user_total_balance_0  # noqa: E501

        Get net assets on multiple chains, including tokens and protocols  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_total_balance_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: User Address (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_total_balance_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_total_balance_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user/total_balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
