# coding: utf-8

"""
    DeBank OpenAPI

    Build for DeFi Developers.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Protocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'chain_id': 'int',
        'name': 'str',
        'logo_url': 'str',
        'site_url': 'str',
        'has_supported_portfolio': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'chain_id': 'chain_id',
        'name': 'name',
        'logo_url': 'logo_url',
        'site_url': 'site_url',
        'has_supported_portfolio': 'has_supported_portfolio'
    }

    def __init__(self, id=None, chain_id=None, name=None, logo_url=None, site_url=None, has_supported_portfolio=None):  # noqa: E501
        """Protocol - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._chain_id = None
        self._name = None
        self._logo_url = None
        self._site_url = None
        self._has_supported_portfolio = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if chain_id is not None:
            self.chain_id = chain_id
        if name is not None:
            self.name = name
        if logo_url is not None:
            self.logo_url = logo_url
        if site_url is not None:
            self.site_url = site_url
        if has_supported_portfolio is not None:
            self.has_supported_portfolio = has_supported_portfolio

    @property
    def id(self):
        """Gets the id of this Protocol.  # noqa: E501

        protocol id  # noqa: E501

        :return: The id of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Protocol.

        protocol id  # noqa: E501

        :param id: The id of this Protocol.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def chain_id(self):
        """Gets the chain_id of this Protocol.  # noqa: E501

        ChainID  # noqa: E501

        :return: The chain_id of this Protocol.  # noqa: E501
        :rtype: int
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this Protocol.

        ChainID  # noqa: E501

        :param chain_id: The chain_id of this Protocol.  # noqa: E501
        :type: int
        """

        self._chain_id = chain_id

    @property
    def name(self):
        """Gets the name of this Protocol.  # noqa: E501


        :return: The name of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Protocol.


        :param name: The name of this Protocol.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def logo_url(self):
        """Gets the logo_url of this Protocol.  # noqa: E501


        :return: The logo_url of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Protocol.


        :param logo_url: The logo_url of this Protocol.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def site_url(self):
        """Gets the site_url of this Protocol.  # noqa: E501

        Prioritize websites that can be interacted with, not official websites  # noqa: E501

        :return: The site_url of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._site_url

    @site_url.setter
    def site_url(self, site_url):
        """Sets the site_url of this Protocol.

        Prioritize websites that can be interacted with, not official websites  # noqa: E501

        :param site_url: The site_url of this Protocol.  # noqa: E501
        :type: str
        """

        self._site_url = site_url

    @property
    def has_supported_portfolio(self):
        """Gets the has_supported_portfolio of this Protocol.  # noqa: E501

        Is portfolio already supported  # noqa: E501

        :return: The has_supported_portfolio of this Protocol.  # noqa: E501
        :rtype: bool
        """
        return self._has_supported_portfolio

    @has_supported_portfolio.setter
    def has_supported_portfolio(self, has_supported_portfolio):
        """Sets the has_supported_portfolio of this Protocol.

        Is portfolio already supported  # noqa: E501

        :param has_supported_portfolio: The has_supported_portfolio of this Protocol.  # noqa: E501
        :type: bool
        """

        self._has_supported_portfolio = has_supported_portfolio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Protocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Protocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
