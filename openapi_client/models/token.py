# coding: utf-8

"""
    DeBank OpenAPI

    Build for DeFi Developers.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Token(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'chain': 'int',
        'name': 'str',
        'symbol': 'str',
        'decimals': 'int',
        'logo_url': 'str',
        'is_verified': 'bool',
        'price': 'float',
        'is_wallet': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'chain': 'chain',
        'name': 'name',
        'symbol': 'symbol',
        'decimals': 'decimals',
        'logo_url': 'logo_url',
        'is_verified': 'is_verified',
        'price': 'price',
        'is_wallet': 'is_wallet'
    }

    def __init__(self, id=None, chain=None, name=None, symbol=None, decimals=None, logo_url=None, is_verified=None, price=None, is_wallet=None):  # noqa: E501
        """Token - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._chain = None
        self._name = None
        self._symbol = None
        self._decimals = None
        self._logo_url = None
        self._is_verified = None
        self._price = None
        self._is_wallet = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if chain is not None:
            self.chain = chain
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if decimals is not None:
            self.decimals = decimals
        if logo_url is not None:
            self.logo_url = logo_url
        if is_verified is not None:
            self.is_verified = is_verified
        if price is not None:
            self.price = price
        if is_wallet is not None:
            self.is_wallet = is_wallet

    @property
    def id(self):
        """Gets the id of this Token.  # noqa: E501

        Ethereum Address or native token id  # noqa: E501

        :return: The id of this Token.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Token.

        Ethereum Address or native token id  # noqa: E501

        :param id: The id of this Token.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def chain(self):
        """Gets the chain of this Token.  # noqa: E501

        ChainID  # noqa: E501

        :return: The chain of this Token.  # noqa: E501
        :rtype: int
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this Token.

        ChainID  # noqa: E501

        :param chain: The chain of this Token.  # noqa: E501
        :type: int
        """

        self._chain = chain

    @property
    def name(self):
        """Gets the name of this Token.  # noqa: E501


        :return: The name of this Token.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Token.


        :param name: The name of this Token.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Token.  # noqa: E501


        :return: The symbol of this Token.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Token.


        :param symbol: The symbol of this Token.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def decimals(self):
        """Gets the decimals of this Token.  # noqa: E501


        :return: The decimals of this Token.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this Token.


        :param decimals: The decimals of this Token.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def logo_url(self):
        """Gets the logo_url of this Token.  # noqa: E501


        :return: The logo_url of this Token.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Token.


        :param logo_url: The logo_url of this Token.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def is_verified(self):
        """Gets the is_verified of this Token.  # noqa: E501


        :return: The is_verified of this Token.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this Token.


        :param is_verified: The is_verified of this Token.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def price(self):
        """Gets the price of this Token.  # noqa: E501

        USD price.Price of 0 means no data  # noqa: E501

        :return: The price of this Token.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Token.

        USD price.Price of 0 means no data  # noqa: E501

        :param price: The price of this Token.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def is_wallet(self):
        """Gets the is_wallet of this Token.  # noqa: E501

        Whether or not to show as a common token in the wallet  # noqa: E501

        :return: The is_wallet of this Token.  # noqa: E501
        :rtype: bool
        """
        return self._is_wallet

    @is_wallet.setter
    def is_wallet(self, is_wallet):
        """Sets the is_wallet of this Token.

        Whether or not to show as a common token in the wallet  # noqa: E501

        :param is_wallet: The is_wallet of this Token.  # noqa: E501
        :type: bool
        """

        self._is_wallet = is_wallet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Token, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
